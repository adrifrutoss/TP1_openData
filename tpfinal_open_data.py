# -*- coding: utf-8 -*-
"""TPFinal_Open_Data.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1R06aMxmILL-bFRtABz6aLcCyXDOIK6GH
"""

from collections import UserList
#Importar librerias

from requests.api import request
import requests
import re
from bs4 import BeautifulSoup
from IPython.display import HTML
import pandas as pd
import urllib3
import unicodedata
from datetime import datetime

#Nro paginas

nro_paginas = 3 

def funcion_datos (paginas):
    url = 'https://www.contrataciones.gov.py/buscador/general.html?filtro=ANDE+&page='+str(paginas)

    headers = {
                "User-Agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.212 Safari/537.36", 
                "Accept-Encoding":"gzip, deflate", "Accept":"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8", 
                "DNT":"1",
                "Connection":"close", 
                "Upgrade-Insecure-Requests":"1"
                }

 

    urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning) 

    #metodo GET
    html = requests.get (url, headers = headers, verify=False)

    #formato html 
    soup = BeautifulSoup (html.content, 'html.parser')

    
    resultados_contenido = soup.find_all('ul',  attrs={'class':'results'}) 

    datos = [i.get_text() for i in resultados_contenido[0].find_all('div', {'class':'col-lg-8'})]
    datos = [ item for item in datos if item != '']
    datos = [unicodedata.normalize("NFKD", item) for item in datos]
  
    return (datos)

#Funcion por pagina 
def funcion (paginas):    
    url = 'https://www.contrataciones.gov.py/buscador/general.html?filtro=ANDE+&page='+str(paginas)
    headers = {
            "User-Agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.212 Safari/537.36", 
            "Accept-Encoding":"gzip, deflate", "Accept":"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8", 
            "DNT":"1",
            "Connection":"close", 
            "Upgrade-Insecure-Requests":"1"
            }

    urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning) 

    #metodo GET
    html = requests.get (url, headers = headers, verify=False)

    #formato html 
    soup = BeautifulSoup (html.content)

    #Traer datos
    contenido = soup.find_all('ul',  attrs={'class':'results'}) 

    licitaciones = list()
    contador = 0
    
    for x in contenido:
            header = x.find_all('h3')
            for y in header:
                #Nombre
                nombre = y.find('a').getText()
                href = y.find('a').get('href')
                
                #Caracteristicas 
                caracteristica = y.find('span').getText().split()
                
                #Datos generales        
                data = funcion_datos(paginas)
 
                licitacion = list()

                #Rellenar             
                if nombre is not None:
                    licitacion.append(nombre)                
                else:
                    licitacion.append("Desconocido")

                if caracteristica is not None:
                    caracteristica = " ".join(caracteristica)
                    licitacion.append(caracteristica)
                else:                
                    licitacion.append("Desconocido")

                if data is not None:
                    id_content = data[contador].split('\n')
                    id_new = [id for id in id_content if id != '']
                    licitacion.append(id_new[1])
                    contador += 1
                    
                    etapa_content = data[contador].split('\n')
                    etapa_new = [etapa for etapa in etapa_content if etapa != '']                    
                    licitacion.append(etapa_new[1])
                    contador += 1       
                    
                    convocante_content = data[contador].split('\n')
                    convocante_new = [convocante for convocante in convocante_content if convocante != '']                
                    licitacion.append(convocante_new[1])
                    contador += 1                    
                    
                    fecha_content = data[contador].split('\n')
                    fecha_new = [fecha for fecha in fecha_content if fecha != '']  
                    licitacion.append(fecha_new[1])
                    contador += 1
                    
                    categoria_content = data[contador].split('\n')
                    categoria_new = [categoria for categoria in categoria_content if categoria != '']
                    tipo_categoria = categoria_new[1].split('-')
                    licitacion.append(tipo_categoria[0])
                    licitacion.append(tipo_categoria[1])
                    contador += 1                    
                    
                    tipo_content = data[contador].split('\n')
                    tipo_new = [tipo for tipo in tipo_content if tipo != '']  
                    licitacion.append(tipo_new[1])
                    contador += 1
                else:
                    licitacion.append("Desconocido")
                  
                            
                #Agregar minilistas a lista general (correspondiente a cada pagina)            
                licitaciones.append(licitacion)
            
    return licitaciones




#Lista de cada pagina
paginacion = []

for num in range(nro_paginas):
    paginacion.append(funcion(num+1))
    

#DATAFRAME
#Recorre las sublistas 
flatten = lambda x: [item for sublist in x for item in sublist]

df = pd.DataFrame(flatten(paginacion),columns=['Nombre', 'Caracteristicas', 'ID', 'Etapa', 'Convocante', 
                                               'Fecha_Entrega_Oferta', 'Num_Categoria', 'Nombre_Categoria', 'Tipo_Procedimiento'])


#Limpieza y transformacion
df["ID"] = df["ID"].astype(int)
df["Num_Categoria"] = df["Num_Categoria"].astype(int)
df["Fecha_Entrega_Oferta"]= pd.to_datetime(df["Fecha_Entrega_Oferta"], infer_datetime_format=True)


#.csv
df.to_csv('datos_licitaciones.csv', index=False, encoding='utf-8')

df.style.hide_index()